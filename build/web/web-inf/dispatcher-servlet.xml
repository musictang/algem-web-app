<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/mvc
          http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
          http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
          http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
          http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
          http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd">

  <!--SUPPORT DES ANNOTATIONS pour MVC-->
  <mvc:annotation-driven/>
  <context:component-scan base-package="net.algem" />

  <!--  Mapping des ressources statiques (css, img, etc.)
  le paramètre location permet de définir un répertoire implicite
  On utilisera @{/resources/themes/css/common.css} et non @{/resources/themes/css/default/common.css}
  L'interface est ainsi facilement thémable : il suffit de remplacer default par le nouveau thème.
  Ce comportement ne semble pas fonctionner avec spring 3.0.6-->
  <mvc:resources mapping="/resources/themes/**" location="/resources/themes/default/"/>

  <!--Definition de l'index par défaut-->
  <!--<mvc:view-controller path="/" view-name="tpl/index"/>-->
  <!--  Explicit index controller. -->
  <!--  <bean  name="indexController" class="org.springframework.web.servlet.mvc.ParameterizableViewController"
                p:viewName="index" />-->

  <!--	<bean class="org.springframework.web.servlet.mvc.support.ControllerClassNameHandlerMapping"/>-->

  <!--Pour faire cohabiter le support des annotations avec les mappings explicites-->
  <!--<bean class="org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter" />-->

  <!--	support des annotations de controlleur première approche-->
  <!--	<bean class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping" />
  <bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter" />-->

  <!--
  Most controllers will use the ControllerClassNameHandlerMapping above, but
  for the index controller we are using ParameterizableViewController, so we must
  define an explicit mapping for it.
  -->
  <!--  <bean id="urlMapping" class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping">
    <property name="mappings">
      <props>
        <prop key="index.html">indexController</prop>
      </props>
    </property>
  </bean>-->
  <!--
  JSP VIEW RESOLVER
  <bean id="viewResolver"
        class="org.springframework.web.servlet.view.InternalResourceViewResolver"
        p:prefix="/WEB-INF/"
        p:suffix=".jsp"
        p:order="1"
        p:viewNames="index,jsp/*"
        p:viewClass="org.springframework.web.servlet.view.JstlView"
  />-->

  <!--THYMELEAF-->
  <bean id="templateResolver" class="org.thymeleaf.spring3.templateresolver.SpringResourceTemplateResolver"
        p:prefix="/"
        p:suffix=".html"
        p:templateMode="HTML"
        p:cacheable="false"
  />

  <bean id="templateEngine" class="org.thymeleaf.spring3.SpringTemplateEngine">
    <property name="templateResolver" ref="templateResolver" />
  </bean>

  <bean class="org.thymeleaf.spring3.view.ThymeleafViewResolver">
    <property name="templateEngine" ref="templateEngine" />
    <property name="order" value="1" />
    <property name="viewNames" value="tpl/*" />
  </bean>

</beans>
